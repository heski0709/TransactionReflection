<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.greedy.section01.ElementTestMapper">

<!-- 
    Mapper xml에서 사용할 수 있는 엘리먼트는 총 9가지이다.
    <cache>, <cache-ref>, <resultMap>, <parameterMap>, <sql>, <select>, <insert>, <update>, <delete>
 -->

<!-- 1. <cachee> 엘리먼트 -->
<!-- 
    cache와 cache-ref엘리먼트는 캐시를 설정하는 엘리먼트이다.

    cache는 현재 네임스페이스에 대한 캐시 설정이고, cache-ref는 다른 네임스페이스에 대한 캐시 설정참조를 할 때 사용한다.

    캐시란?
    컴퓨터 과학에서 데이터나 값을 미리 복사해놓은 임시 장소를 가리킨다.
    캐시 접근 시간에 비해 원래 데이터에 접근하는 시간이 오래 걸리는 경우나, 값을 다시 계산하는 시간을 절약하고 싶은 경우 사용한다.
    캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간 없이 더 빠른 속도로 데이터에 접근할 수 있다.
 -->
<!-- 
    디폴트 설정은 다음과 같다.
    1. 매퍼 xml의 모든 select 구문의 결과를 캐시한다.
    2. 매퍼 xml의 insert, update, delete는 모두 캐시를 지운다.
    3. 가장 오랫동안 사용하지 않은 캐시를 지우는 알고리즘(LRU - Least Recently Used)을 사용한다.
    4. 애플리케이션이 실행되는 동안 캐시를 유지한다. 특정 시점에 사라지거나 하지 않는다.
    5. 캐시는 최대 1024개까지 저정한다.
    6. 캐시는 읽기/쓰기가 모두 가능하다.
 -->

<!-- 
    사용 가능 속성
    1. eviction : 캐시 알고리즘 속성이며 디폴트는 LRU이다. FIFO, SOFT, WEAK로도 설정 가능하다.
    2. flushInterval : 설정된 캐시를 얼마 동안 유지할지를 밀리초 단위로 설정하며, 양수이어야 한다. (여기만 지정한다고 정확히 동작하지는 않는다.)
    3. size : 캐시에 저장할 객체의 수를 지정. 디폴트는 1024이다.
    4. readonly : 읽기만 가능한 경우 캐시 데이터의 변경이 되지 않는다.
 -->

<cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>

<select id="selectCacheTest" resultType="java.lang.String">
    SELECT
           A.MENU_NAME
      FROM TBL_MENU A
</select>

<!-- 2. <resultMap> 엘리먼트 -->
<!-- 
    데이터베이스 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다.
    resultMap 엘리먼트는 마이바티스에서 가장 중요하고 강력한 엘리먼트이다.
    ResultSet에서 데이터를 가져올 때 작성되는 JDBC코드를 대부분 줄요주는 역할을 담당한다.
    
    사실 join매핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요하다.
    ResultMap은 간단한 구문에서는 매핑이 필요하지 않고 복잡한 구문에서 관계를 서술하기 위해 필요하다.

    resultMap 엘리먼트는 4가지 속성을 설정
    1. id : 패밍 구문에서 결과 매핑을 사용할 때 구분하기 위한 아이디
    2. type : 결과 매핑을 적용하는 대상 객체 타입 (매핑 구문의 결과 데이터를 저장할 자바 타입을 지정)
    3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑 정보를 확장할 때 사용 (부모 resultMap 아이디 사용)
    4. autoMapping : 결과 매핑을 자동 매핑을 할 것인지를 결정한다. (config에 설정한 전역 설정을 override한다.)
                     자동 매핑 설정은 동일한 컬럼명이 있는 경우 위험성을 가지기 때문에 사용하지 않는 것이 안전하다.
 -->

    <resultMap id="menuResultMap1" type="MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>

    <resultMap id="menuResultMap2" type="MenuDTO" extends="menuResultMap1">
        <!-- 추가적인 속성만 넣으면 된다. -->
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>
    
    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT A.*
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

    <!-- 2-1. resultMap의 하위 엘리먼트 -->

    <!-- 
        <id> : primary key 컬럼을 매핑하기 위한 태그(성능 향상)
        <result> : pk가 아닌 일반 컬럼에 매핑하기 위한 태그
        <constructor> : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용한다.
                        <idArg>, <arg> 하위 엘리먼트가 있다.
        <association> : 복잡한 타입의 연관관계로 1:1 포함 관계인 경우 사용한다.
        <collection> : 복잡한 타입의 연관관계로 1:M 포함관계인 경우 사용한다.
        <discriminator> : 조건에 따라 다른 resultMap이 매핑되도록 한다.
     -->

    <!-- 2-1-1. <constructor> -->
    <resultMap id="menuResultMap3" type="MenuDTO">
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="string"/>
            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="string"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
        SELECT A.*
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

    <!-- 2-1-2. <association> -->
    <!-- <association>은 중간에 넣으면 에러가 발생한다. 가장 마지막 부분에 넣어준다. -->
    
    <!-- 따로만든 resultMap을 사용하는 방법 -->
    
    <!-- <resultMap id="menuAndCategoryResultMap" type="MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>

        <association property="category" resultMap="categoryResultMap"/>
    </resultMap>
    <resultMap id="categoryResultMap" type="CategoryDTO">
        <id property="code" column="CATEGORY_CODE"/>
        <result property="name" column="CATEGORY_NAME"/>
        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
    </resultMap> -->

    <!-- association 내에 id, result 작성하는 방법 -->
    <resultMap id="menuAndCategoryResultMap" type="MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
            
        <association property="category" javaType="CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>

    <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
        SELECT A.*
             , B.*
          FROM TBL_MENU A
          JOIN TBL_CATEGORY B ON(A.CATEGORY_CODE = B.CATEGORY_CODE)
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

    <!-- 2-1-3. <collection> -->
    <resultMap id="categoryAndMenuResultMap" type="CategoryAndMenuDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>

        <collection property="menu" ofType="MenuDTO">
            <id property="code" column="MENU_CODE"/>
            <result property="name" column="MENU_NAME"/>
            <result property="price" column="MENU_PRICE"/>
            <result property="categoryCode" column="CATEGORY_CODE"/>
            <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        </collection>
    </resultMap>

    <select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
        SELECT A.*
             , B.*
          FROM TBL_CATEGORY A
          LEFT JOIN TBL_MENU B ON(A.CATEGORY_CODE = B.CATEGORY_CODE)
         ORDER BY A.CATEGORY_CODE
    </select>

    <!-- 3. <sql> 엘리먼트
        : 각 매핑 구문에서 공통으로 사용할 수 있는 SQL 문자열의 일부를 정의하고 재사용하기 위해 사용한다.    
     -->
    <sql id="columns">
        MENU_CODE as code
      , MENU_NAME as name
      , MENU_PRICE as price
      , CATEGORY_CODE as categoryCode
      , ORDERABLE_STATUS as orderableStatus
    </sql>
    <select id="selectSqlTest" resultType="MenuDTO">
        SELECT
        <include refid="columns"/>
          FROM TBL_MENU
         WHERE ORDERABLE_STATUS = 'Y'
    </select>

    <!-- 
        4. <insert> 엘리먼트

        insert, update, delete 엘리먼트는 사용하는 속성이 대부분 동일하지만 insert 엘리먼트는 좀 더 많은 속성을 정의할 수 있다.
        공통 속성
        id : 매핑 구문을 구분하는 아이디이다.
        parameterType : 파라미터 타입을 지정한다. 이미 정의된 별칭을 사용할 수 있거나, 클래스의 full-name을 적어주면 된다.
        flushCache : 매핑 구문을 실행할 때 캐시를 지울지 여부를 설정한다.
        timeout : sql을 실행한 후 응답을 기다리는 최대 시간이다. 보통은 설정하지 않고 JDBC드라이버 자체의 타임아웃 값을 그대로 사용한다.
        statementType : JDBC구문 타입을 지정한다. STATEMENT, PREPARED, CALLABLE 중 하나를 쓸 수 있으면 기본값은 PREPARED이다

        insert 추가 속성
        userGenerateKeys : 생성 키 값을 만들기 위해 JDBC의 getGenerateKeys 메소드를 호출할지 결정하며 기본값은 false이다.
        keyProperty : insert구문의 하위 앨리먼트인 selectKey 엘리먼트에 의한 반환값을 설정할 프로퍼티를 지정한다.
        keyColumn : 생성 키를 가진 테이블의 컬럼명을 설정한다.
                    (키 컬럼이 테이블의 첫번째 행이 아닌 데이터베이스에서만 필요하다 - PostgreSQL 제외)
     -->
     <insert id="insertMenuTest" parameterType="MenuDTO">
        INSERT
          INTO TBL_MENU A
        VALUES
        (
          SEQ_MENU_CODE.NEXTVAL
        , #{ name }
        , #{ price }
        , #{ categoryCode }
        , #{ orderableStatus }
        )
     </insert>

     <insert id="insertNewCategory">
        INSERT
          INTO TBL_CATEGORY
        VALUES
        (
          SEQ_CATEGORY_CODE.NEXTVAL
        , #{ category.name }
        , null
        )
     </insert>

     <insert id="insertNewMenu">
        INSERT
          INTO TBL_MENU
        VALUES
        (
          SEQ_MENU_CODE.NEXTVAL
        , #{ name }
        , #{ price }
        , SEQ_CATEGORY_CODE.CURRVAL
        , #{ orderableStatus }
        )
     </insert>
</mapper>
